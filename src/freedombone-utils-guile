#!/bin/bash
#
# .---.                  .              .
# |                      |              |
# |--- .--. .-.  .-.  .-.|  .-. .--.--. |.-.  .-. .--.  .-.
# |    |   (.-' (.-' (   | (   )|  |  | |   )(   )|  | (.-'
# '    '     --'  --'  -' -  -' '  '   -' -'   -' '   -  --'
#
#                    Freedom in the Cloud
#
# Recent version of guile
#
# License
# =======
#
# Copyright (C) 2017 Bob Mottram <bob@freedombone.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

GUILE_VERSION='2.2.0'
GUILE_HASH='c707b9cf6f97ecca3a4e3e704e62b83f95f1aec28ed1535f5d0a1d36af07a015'

EIGHTSYNC_REPO="git://git.savannah.gnu.org/8sync.git"
EIGHTSYNC_COMMIT='8cbb7f22227c0afdd3b0bd758ebec0efba2fa1e1'

GUIX_VERSION='0.13.0'
GUIX_DOWNLOAD_URL='ftp://alpha.gnu.org/gnu/guix'

function install_8sync {
    apt-get -qy install flex libunistring-dev libgc-dev autoconf texinfo

    if [ ! -d $INSTALL_DIR ]; then
        mkdir $INSTALL_DIR
    fi
    cd $INSTALL_DIR

    git_clone $EIGHTSYNC_REPO $INSTALL_DIR/eightsync
    cd $INSTALL_DIR/eightsync
    git checkout ${EIGHTSYNC_COMMIT} -b ${EIGHTSYNC_COMMIT}

    export GUILE_BASE_PATH=/opt/guile-${GUILE_VERSION}
    export GUILE_CFLAGS="-I${GUILE_BASE_PATH}/include"
    export GUILE_LIBS="-L${GUILE_BASE_PATH}/lib -lguile -lqthreads -ldl -ltermcap -lsocket -lnsl -lm"
    ./bootstrap.sh
    configure
    make
    make install
}

function install_guile {
    # Currently this only works for x86_64
    read_config_param ARCHITECTURE
    if [[ ${ARCHITECTURE} != "x86_64" ]]; then
        return
    fi
    GUILE_ARCH='x86_64'

    apt-get -qy install flex libunistring-dev libgc-dev autoconf texinfo lzip wget

    if [ ! -d $INSTALL_DIR ]; then
        mkdir $INSTALL_DIR
    fi
    cd $INSTALL_DIR

    if [ ! -f guile-${GUILE_VERSION}-pack-${GUILE_ARCH}-linux-gnu.tar.lz ]; then
        wget https://ftp.gnu.org/gnu/guile/guile-${GUILE_VERSION}-pack-${GUILE_ARCH}-linux-gnu.tar.lz
    fi
    if [ ! -f guile-${GUILE_VERSION}-pack-${GUILE_ARCH}-linux-gnu.tar.lz ]; then
        echo 'Unable to download guile pack'
        exit 6735238
    fi
    CURR_GUILE_HASH=$(sha256sum guile-${GUILE_VERSION}-pack-${GUILE_ARCH}-linux-gnu.tar.lz | awk -F ' ' '{print $1}')
    if [[ "$CURR_GUILE_HASH" != "$GUILE_HASH" ]]; then
        echo 'Guile hash does not match'
        exit 7237625
    fi
    cd /
    tar xvf $INSTALL_DIR/guile-${GUILE_VERSION}-pack-${GUILE_ARCH}-linux-gnu.tar.lz
    if [ ! -d /opt/guile-${GUILE_VERSION}/bin ]; then
        echo 'Guile was not installed'
        exit 825269
    fi
    echo "export GUILE_PATH=/opt/guile-${GUILE_VERSION}/bin" >> ~/.bashrc
    echo 'export PATH=$PATH:$GUILE_PATH' >> ~/.bashrc
}

function install_guix_get_architecture {
    if [[ ${ARCHITECTURE} == *"386" || ${ARCHITECTURE} == *"686" ]]; then
        CURR_ARCH='i686'
    fi
    if [[ ${ARCHITECTURE} == *"amd64" || ${ARCHITECTURE} == "x86_64" ]]; then
        CURR_ARCH='x86_64'
    fi
    if [[ ${ARCHITECTURE} == *"arm"* ]]; then
        CURR_ARCH='armhf'
    fi
    if [ ! ${CURR_ARCH} ]; then
        echo $'No architecture specified'
        ARCHITECTURE=$(uname -m)
        if [[ ${ARCHITECTURE} == "arm"* ]]; then
            CURR_ARCH='armhf'
            echo $"Using $CURR_ARCH"
        fi
        if [[ ${ARCHITECTURE} == "amd"* || ${ARCHITECTURE} == "x86_64" ]]; then
            CURR_ARCH='x86_64'
            echo $"Using $CURR_ARCH"
        fi
        if [[ ${ARCHITECTURE} == *"386" || ${ARCHITECTURE} == *"686" ]]; then
            CURR_ARCH='i686'
            echo $"Using $CURR_ARCH"
        fi
    fi
}

function install_guix_user {
    install_path=$1

    if ! grep -q 'GUIX_LOCPATH' $install_path/.bashrc; then
        echo 'export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale' >> $install_path/.bashrc
    fi
    if ! grep -q 'GUIX_PROFILE' $install_path/.bashrc; then
        echo 'export GUIX_PROFILE=$HOME/.guix-profile' >> $install_path/.bashrc
        echo 'source $GUIX_PROFILE/etc/profile' >> $install_path/.bashrc
    fi
}

function image_install_guix {
    install_guix_get_architecture
    if [ ! -d $rootdir$INSTALL_DIR/guix ]; then
        mkdir -p $INSTALL_DIR/guix
    fi
    cd $rootdir$INSTALL_DIR/guix
    if [ ! -f guix-binary-${GUIX_VERSION}.${CURR_ARCH}-linux.tar.xz ]; then
        wget $GUIX_DOWNLOAD_URL/guix-binary-${GUIX_VERSION}.${CURR_ARCH}-linux.tar.xz
    fi
}

function install_guix {
    if [[ $(app_is_installed install_guix) == "1" ]]; then
        return
    fi

    apt-get -qy install wget xz-utils

    read_config_param MY_USERNAME
    read_config_param ARCHITECTURE

    install_guix_get_architecture

    if [ ! -d $INSTALL_DIR/guix ]; then
        mkdir -p $INSTALL_DIR/guix
    fi
    cd $INSTALL_DIR/guix
    if [ ! -f guix-binary-${GUIX_VERSION}.${CURR_ARCH}-linux.tar.xz ]; then
        wget $GUIX_DOWNLOAD_URL/guix-binary-${GUIX_VERSION}.${CURR_ARCH}-linux.tar.xz
    fi
    if [ ! -f guix-binary-${GUIX_VERSION}.${CURR_ARCH}-linux.tar.xz ]; then
        echo $"Unable to download guix from $GUIX_DOWNLOAD_URL"
        exit 73826
    fi
    tar --warning=no-timestamp -xf guix-binary-${GUIX_VERSION}.${CURR_ARCH}-linux.tar.xz
    if [ ! -d var/guix ]; then
        echo $'guix directory var/guix not found'
        exit 8726325
    fi
    if [ -d /var/guix ]; then
        rm -rf /var/guix
    fi
    mv $INSTALL_DIR/guix/var/guix /var/
    if [ ! -d gnu ]; then
        echo $'guix gnu directory not found'
        exit 743383235
    fi
    if [ -d /gnu ]; then
        rm -rf /gnu
    fi
    mv gnu /

    ln -sf /var/guix/profiles/per-user/root/guix-profile /root/.guix-profile
    export GUIX_PROFILE=$HOME/.guix-profile
    source $GUIX_PROFILE/etc/profile

    # add build users
    groupadd --system guixbuild
    for i in `seq -w 1 10`;
    do
        useradd -g guixbuild -G guixbuild           \
                -d /var/empty -s `which nologin`    \
                -c "Guix build user $i" --system    \
                guixbuilder$i;
    done

    GUIX_DAEMON=$(find /var/guix -name guix-daemon.service)
    if [ ! -f $GUIX_DAEMON ]; then
        echo $"$GUIX_DAEMON"
        echo $'No guix systemd daemon found'
        exit 78225548
    fi
    cp $GUIX_DAEMON /etc/systemd/system/
    systemctl enable guix-daemon
    systemctl start guix-daemon

    if [ ! -d /usr/local/bin ]; then
        mkdir -p /usr/local/bin
    fi
    cd /usr/local/bin
    ln -s /var/guix/profiles/per-user/root/guix-profile/bin/guix

    if [ ! -d /usr/local/share/info ]; then
        mkdir -p /usr/local/share/info
    fi

    install_guix_user /root
    install_guix_user /etc/skel
    install_guix_user /home/$MY_USERNAME

    guix package -i glibc-locales

    install_completed install_guix
}

# NOTE: deliberately no exit 0
