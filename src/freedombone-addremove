#!/bin/bash
#  _____               _           _
# |   __|___ ___ ___ _| |___ _____| |_ ___ ___ ___
# |   __|  _| -_| -_| . | . |     | . | . |   | -_|
# |__|  |_| |___|___|___|___|_|_|_|___|___|_|_|___|
#
#                              Freedom in the Cloud
#
# Add or remove apps
#
# License
# =======
#
# Copyright (C) 2015-2018 Bob Mottram <bob@freedombone.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PROJECT_NAME='freedombone'

export TEXTDOMAIN=${PROJECT_NAME}-addremove
export TEXTDOMAINDIR="/usr/share/locale"

PROJECT_INSTALL_DIR=/usr/local/bin
if [ -f "/usr/bin/${PROJECT_NAME}" ]; then
    PROJECT_INSTALL_DIR=/usr/bin
fi

COMPLETION_FILE="$HOME/${PROJECT_NAME}-completed.txt"
CONFIGURATION_FILE="$HOME/${PROJECT_NAME}.cfg"

# Start including files

source "$PROJECT_INSTALL_DIR/${PROJECT_NAME}-vars"

UTILS_FILES="/usr/share/${PROJECT_NAME}/utils/${PROJECT_NAME}-utils-*"
for f in $UTILS_FILES
do
    source "$f"
done

APP_FILES="/usr/share/${PROJECT_NAME}/apps/${PROJECT_NAME}-app-*"
for f in $APP_FILES
do
    source "$f"
done

# End including files

function mark_unselected_apps_as_removed {
    # Initially mark the apps not chosen on first install as being removed
    # otherwise they may be automatically installed on the next update
    select_all_apps=$1
    if [[ "$select_all_apps" != "add-all" ]]; then
        return
    fi

    if [ -f "$REMOVED_APPS_FILE" ]; then
        rm "$REMOVED_APPS_FILE"
    fi

    app_index=0
    # shellcheck disable=SC2068
    for app_name in ${APPS_AVAILABLE[@]}
    do
        if [[ ${APPS_CHOSEN[$app_index]} == "0" ]]; then
            echo "_${app_name}_" >> "$REMOVED_APPS_FILE"
        fi
        app_index=$((app_index+1))
    done
}

function app_not_on_onion_only {
    app_name="$1"

    read_config_param ONION_ONLY

    if [[ "$ONION_ONLY" != 'no' ]]; then
        if ! grep -q "NOT_ON_ONION=1" "/usr/share/${PROJECT_NAME}/apps/${PROJECT_NAME}-app-${app_name}"; then
            echo "0"
            return
        fi
    fi
    echo "1"
}

function app_expected_to_be_installed {
    # is the given application expected to be installed by default?
    select_all_apps="$1"
    app_name="$2"

    read_config_param ONION_ONLY

    if [[ "$select_all_apps" == "add-all" ]]; then
        if [[ $ONION_ONLY != 'no' && "$app_name" == "hubzilla"  ]]; then
            echo "0"
            return
        fi
        if ! grep -q "IN_DEFAULT_INSTALL=1" "/usr/share/${PROJECT_NAME}/apps/${PROJECT_NAME}-app-${app_name}"; then
            echo "0"
            return
        fi
    fi
    echo "1"
}

function show_apps {
    select_all_apps="$1"
    applist=""
    n=1
    app_index=0
    # shellcheck disable=SC2068
    for a in ${APPS_AVAILABLE[@]}
    do
        if [[ $(app_not_on_onion_only "$a") != "0" ]]; then
            if [[ ${APPS_INSTALLED[$app_index]} == "0" &&  "$select_all_apps" != "add-all" ]]; then
                applist="$applist $n $a off"
            else
                if [[ $(app_expected_to_be_installed "$select_all_apps" "$a") == "0" ]]; then
                    applist="$applist $n $a off"
                else
                    applist="$applist $n $a on"
                fi
            fi
            n=$((n+1))
        fi
        app_index=$((app_index+1))
    done

    # shellcheck disable=SC2086
    choices=$(dialog --stdout --backtitle $"Freedombone" \
                     --title $"Add/Remove Applications" \
                     --checklist $'Choose:' \
                     27 40 20 $applist)

    # shellcheck disable=SC2181
    if [ $? -eq 0 ]; then
        for choice in $choices
        do
            app_index=$((choice-1))
            APPS_CHOSEN[$app_index]="1"
        done
    else
        exit 0
    fi
}

function remove_apps_selected {
    # which apps need to be removed?
    removals=""
    app_index=0
    n=0
    # shellcheck disable=SC2068
    for a in ${APPS_INSTALLED[@]}
    do
        if [[ ${APPS_INSTALLED[$app_index]} == "1" ]]; then
            if [[ ${APPS_CHOSEN[$app_index]} == "0" ]]; then
                if [ ${n} -gt 0 ]; then
                    removals="$removals ${APPS_AVAILABLE[$app_index]}"
                else
                    removals="${APPS_AVAILABLE[$app_index]}"
                fi
                n=$((n+1))
            fi
        fi
        app_index=$((app_index+1))
    done

    # if no apps to be removed then don't do anything
    if [ ${n} -eq 0 ]; then
        return
    fi

    # ask for confirmation
    dialog --title $"Remove applications" \
           --backtitle $"Freedombone" \
           --defaultno \
           --yesno $"\\nYou have chosen to remove $n apps.\\n\\n    $removals\\n\\nIf you choose 'yes' then this will remove both the applications and their data/messages. If you don't have a backup then you will not be able to recover the data for these applications.\\n\\nAre you sure that you wish to continue?" 15 60
    sel=$?
    case $sel in
        1) return;;
        255) return;;
    esac

    clear

    # remove the apps
    read_configuration
    remove_apps
}

function install_apps_selected {
    # which apps need to be installed?
    select_all_apps=$1
    installs=""
    app_index=0
    n=0
    # shellcheck disable=SC2068
    for a in ${APPS_INSTALLED[@]}
    do
        if [[ ${APPS_INSTALLED[$app_index]} == "0" ]]; then
            if [[ ${APPS_CHOSEN[$app_index]} == "1" ]]; then
                if [ ${n} -gt 0 ]; then
                    installs="$installs ${APPS_AVAILABLE[$app_index]}"
                else
                    installs="${APPS_AVAILABLE[$app_index]}"
                fi
                n=$((n+1))
            fi
        fi
        app_index=$((app_index+1))
    done

    # if no apps to be installed then don't do anything
    if [ ${n} -eq 0 ]; then
        return
    fi

    if [[ "$select_all_apps" != "add-all" ]]; then
        # ask for confirmation
        if [ $n -eq 1 ]; then
            dialog --title $"$installs" \
                   --backtitle $"Freedombone" \
                   --defaultno \
                   --yesno $"\\nThis will install the $installs app\\n\\nProceed?" 9 40
        else
            dialog_height=$((15 + "$n"))
            dialog --title $"Add applications" \
                   --backtitle $"Freedombone" \
                   --defaultno \
                   --yesno $"\\nYou have chosen to install $n apps\\n\\n    $installs\\n\\nProceed?" $dialog_height 60
        fi
        sel=$?
        case $sel in
            1) return;;
            255) return;;
        esac
    fi

    clear

    # install the apps
    read_configuration
    install_apps interactive
    if [ ! "$APP_INSTALLED_SUCCESS" ]; then
        echo $'One or more apps failed to install'
    fi
}

if [[ $1 == "test"* ]]; then
    if ! ${PROJECT_NAME}-tests; then
        exit 2
    fi
fi

detect_installable_apps

# if no applications were found
if [[ ${#APPS_AVAILABLE[@]} == 0 ]]; then
    exit 1
fi

show_apps "$1"
mark_unselected_apps_as_removed "$1"

clear

remove_apps_selected

if [[ "$1" == "add-all" ]]; then
    install_apps_selected add-all
else
    install_apps_selected
fi

exit 0
