#!/bin/bash
#
# .---.                  .              .
# |                      |              |
# |--- .--. .-.  .-.  .-.|  .-. .--.--. |.-.  .-. .--.  .-.
# |    |   (.-' (.-' (   | (   )|  |  | |   )(   )|  | (.-'
# '    '     --'  --'  -' -  -' '  '   -' -'   -' '   -  --'
#
#                    Freedom in the Cloud
#
# Final stage of install
#
# License
# =======
#
# Copyright (C) 2014-2018 Bob Mottram <bob@freedombone.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

function install_final {
    if [[ $(is_completed $FUNCNAME) == "1" ]]; then
        return
    fi
    # unmount any attached usb drive
    if [ -d $USB_MOUNT ]; then
        umount $USB_MOUNT
        rm -rf $USB_MOUNT
    fi
    function_check split_gpg_key_into_fragments
    split_gpg_key_into_fragments
    lockdown_permissions

    mark_completed $FUNCNAME
    clear
    echo ''

    if [[ $ONION_ONLY == 'no' ]]; then
        echo $"
If you wish to verify the server ssh public key at next login it is:
$(get_ssh_server_key)

Ensure that ports are forwarded from your internet router.
You can find the list of ports within the firewall section of
the administrator control panel.
"
    else
        echo $"
If you wish to verify the server ssh public key at next login it is:
$(get_ssh_server_key)
"
    fi
    echo ''

    # add user menu on ssh login
    if ! grep -q 'controluser' /home/$MY_USERNAME/.bashrc; then
        echo 'controluser' >> /home/$MY_USERNAME/.bashrc
    fi
    if [ ! -f $IMAGE_PASSWORD_FILE ]; then
        if [ -f /root/${PROJECT_NAME}-wifi.cfg ]; then
            create_wifi_startup_script
            echo ''
            echo $'Shutting down the system. Detatch the ethernet cable, attach wifi dongle, then power on again.'
            echo ''
            ${PROJECT_NAME}-logging off --restart
            systemctl poweroff
            return
        fi
        echo $'Turning off logging'
        ${PROJECT_NAME}-logging off --restart
        echo $'Rebooting the system'
        systemctl reboot -i
    fi
    echo $'Turning off logging'
    ${PROJECT_NAME}-logging off --restart
}

function update_installed_apps_list {
    # Why does this secondary file exist, apart from COMPLETION_FILE ?
    # It's so that it is visible to unprivileged users from the user control panel
    cat $COMPLETION_FILE | grep "install_" > /usr/share/${PROJECT_NAME}/installed.txt
}

function create_default_user_removal_daemon {
    # This daemon runs on first boot and removes the default fbone user

    first_start_daemon_filename=/etc/systemd/system/firststart.service
    first_start_script=/usr/local/bin/firststart
    echo '#!/bin/bash' > $first_start_script
    echo 'if [ -d /home/fbone]; then' >> $first_start_script
    echo '    userdel -r fbone' >> $first_start_script
    echo '    if [ -d /home/fbone]; then' >> $first_start_script
    echo '        rm -rf /home/fbone' >> $first_start_script
    echo '    fi' >> $first_start_script
    echo 'fi' >> $first_start_script
    echo 'systemctl disable firststart' >> $first_start_script
    echo "rm $first_start_daemon_filename" >> $first_start_script
    chmod +x $first_start_script

    echo '[Unit]' > $first_start_daemon_filename
    echo 'Description=Daemon run on first boot' >> $first_start_daemon_filename
    echo 'After=syslog.target' >> $first_start_daemon_filename
    echo 'After=network.target' >> $first_start_daemon_filename
    echo '' >> $first_start_daemon_filename
    echo '[Service]' >> $first_start_daemon_filename
    echo 'User=root' >> $first_start_daemon_filename
    echo 'Group=root' >> $first_start_daemon_filename
    echo "ExecStart=$first_start_script" >> $first_start_daemon_filename
    echo 'StandardOutput=syslog' >> $first_start_daemon_filename
    echo 'StandardError=syslog' >> $first_start_daemon_filename
    echo '' >> $first_start_daemon_filename
    echo '[Install]' >> $first_start_daemon_filename
    echo 'WantedBy=multi-user.target' >> $first_start_daemon_filename
    systemctl enable firststart
}

function setup_final {
    function_check update_installed_apps_list
    update_installed_apps_list

    function_check create_default_user_removal_daemon
    create_default_user_removal_daemon

    function_check install_tripwire
    install_tripwire

    function_check install_final
    install_final

    export DEBIAN_FRONTEND=
}

# NOTE: deliberately no exit 0
