#!/bin/bash
#  _____               _           _
# |   __|___ ___ ___ _| |___ _____| |_ ___ ___ ___
# |   __|  _| -_| -_| . | . |     | . | . |   | -_|
# |__|  |_| |___|___|___|___|_|_|_|___|___|_|_|___|
#
#                              Freedom in the Cloud
#
# Network functions
#
# License
# =======
#
# Copyright (C) 2014-2018 Bob Mottram <bob@freedombone.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# If the system is on an IPv6 network
IPV6_NETWORK='2001:470:26:307'

# Destinations used to get the local IP address of this system
# Google ipv6 DNS   2001:4860:4860::8888
# OpenDNS ipv6 DNS  2620:0:ccc::2
IPV4_ADDRESS_TEST_DESTINATION='85.214.73.63'
IPV6_ADDRESS_TEST_DESTINATION='2620:0:ccc::2'

# The static IP address of the system within the local network
# By default the IP address is dynamic within your LAN
LOCAL_NETWORK_STATIC_IP_ADDRESS=

# IP address of the router (gateway)
ROUTER_IP_ADDRESS="192.168.1.254"

MESH_INSTALL_DIR=/var/lib

# For Beaglebone Black network reboot daemon
BBBRTC_REPO="https://code.freedombone.net/bashrc/bbbrtc"
PHYREG_REPO="https://code.freedombone.net/bashrc/phyreg"

function bbb_network_restart_daemon {
    rdir="$1"

    # This checks if there is an ethernet boot fault
    # and if so it reboots and tries again
    # https://github.com/bigjosh/bbbphyfix

    if [ ! -d "$rdir$INSTALL_DIR" ]; then
        mkdir -p "$rdir$INSTALL_DIR"
    fi

    # install bbbrtc
    cd "$rdir$INSTALL_DIR" || exit 357893563
    git clone $BBBRTC_REPO "$rdir$INSTALL_DIR/bbbrtc"
    cd "$rdir$INSTALL_DIR/bbbrtc" || exit 357893563
    if ! make; then
        exit 3568735
    fi

    # install bbbphyreg
    cd "$rdir$INSTALL_DIR" || exit 357893563
    git clone $PHYREG_REPO "$rdir$INSTALL_DIR/phyreg"
    cd "$rdir$INSTALL_DIR/phyreg" || exit 54789786
    make clean
    if ! make; then
        exit 46879275
    fi
    make install

    { echo '#!/bin/bash';
      echo '';
      echo 'sleep 30';
      echo '';
      echo "if [[ \$(phyreg test 18 13) == \"1\" ]]; then";
      echo '';
      echo '    sleep 1';
      echo '';
      echo "    NOW=\$(bbbrtc now)";
      echo "    echo \"chkphy:Rebooting NOW=\$NOW\" >/dev/kmsg";
      echo "    echo \"Rebooting\" >>/var/tmp/chkphy.log";
      echo '    # make sure that log message actually gets written before we pull the plug';
      echo '    sync';
      echo '    i2cset -f -y 0 0x24 0x0a 0x00';
      echo '    bbbrtc now 130';
      echo '    bbbrtc wake 110';
      echo '    bbbrtc sleep 102';
      echo '    bbbrtc now 100';
      echo '    while true;';
      echo '    do echo waiting to reboot';
      echo '        sleep 10';
      echo '    done';
      echo '    fi';
      echo '';
      echo "echo \"chkphy:eth0 good\" >/dev/kmsg"; } > "${rdir}/usr/bin/chkphy"
    chmod +x "${rdir}/usr/bin/chkphy"

    { echo '[Unit]';
      echo "Description=Beaglebone Black Network Restart Daemon";
      echo 'After=syslog.target';
      echo '';
      echo '[Service]';
      echo 'Type=simple';
      echo 'User=root';
      echo 'Group=root';
      echo 'WorkingDirectory=/root';
      echo 'ExecStart=/usr/bin/chkphy';
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > "${rdir}/etc/systemd/system/bbbnetwork.service"
    if [ ! "${rdir}" ]; then
        systemctl enable bbbnetwork
    else
        chroot "$rdir" systemctl enable bbbnetwork
    fi
}

function get_app_icann_address {
    app_name="$1"
    if grep -q "${app_name} domain" "$COMPLETION_FILE"; then
        grep "${app_name} domain" "${COMPLETION_FILE}" | head -n 1 | awk -F ':' '{print $2}'
        return
    else
        app_name_upper="$(echo "$app_name" | tr '[:lower:]' '[:upper:]')_DOMAIN_NAME"
        if [ "$app_name_upper" ]; then
            param_value=$(grep "${app_name_upper}=" "$CONFIGURATION_FILE" | head -n 1 | awk -F '=' '{print $2}')
            if [ "${param_value}" ]; then
                echo "${param_value}"
                return
            fi
        fi
    fi
    echo "${DEFAULT_DOMAIN_NAME}"
}

function install_static_network {
    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        return
    fi
    if [[ $INSTALLING_ON_BBB == "yes" ]]; then
        return
    fi

    echo '# This file describes the network interfaces available on your system' > /etc/network/interfaces
    echo '# and how to activate them. For more information, see interfaces(5).' >> /etc/network/interfaces
    echo 'source /etc/network/interfaces.d/*' >> /etc/network/interfaces

    if [ ! $LOCAL_NETWORK_STATIC_IP_ADDRESS ]; then

        { echo 'auto eth0';
          echo 'iface eth0 inet dhcp'; } > /etc/network/interfaces.d/dynamic

        if [ -f /etc/network/interfaces.d/static ]; then
            rm /etc/network/interfaces.d/static
        fi

        mark_completed "${FUNCNAME[0]}"
        return
    fi

    { echo 'auto eth0';
      echo 'iface eth0 inet static';
      echo "    address $LOCAL_NETWORK_STATIC_IP_ADDRESS";
      echo '    netmask 255.255.255.0';
      echo "    gateway $ROUTER_IP_ADDRESS"; } > /etc/network/interfaces.d/static

    if [ -f /etc/network/interfaces.d/dynamic ]; then
        rm /etc/network/interfaces.d/dynamic
    fi
}

function get_external_ipv4_address {
    curl -s ipinfo.io/ip
}

function get_ipv4_address {
    IPv4dev=$(ip route get $IPV4_ADDRESS_TEST_DESTINATION | awk '{for(i=1;i<=NF;i++)if($i~/dev/)print $(i+1)}')
    ip -o -f inet addr show dev "$IPv4dev" | awk '{print $4}' | awk 'END {print}' | awk -F '/' '{print $1}'
}

function get_ipv6_address {
    retval=$(ip -6 route get $IPV6_ADDRESS_TEST_DESTINATION 2> /dev/null)
    echo "$retval" | awk -F " " '{ for(i=1;i<=NF;i++) if ($i == "src") print $(i+1) }'
}

function update_external_ip {
    ip_update_script=/usr/bin/externalipupdate
    { echo '#!/bin/bash';
      echo "existing_ip=\$(cat $CONFIGURATION_FILE | grep \"EXTERNAL_IPV4_ADDRESS=\" | head -n 1 | awk -F '=' '{print \$2}')'";
      echo "curr_ip=\$(curl -s ipinfo.io/ip)";
      echo "if [[ \"\$curr_ip\" != \"\$existing_ip\" ]]; then";
      echo "  sed -i \"s|EXTERNAL_IPV4_ADDRESS=.*|EXTERNAL_IPV4_ADDRESS=\${curr_ip}|g\" $CONFIGURATION_FILE";
      echo "  echo \"\$(date)\" >> ~/${PROJECT_NAME}-external-ip-changes.txt";
      echo 'fi'; } > $ip_update_script

    cron_add_mins 10 $ip_update_script
}

# NOTE: deliberately no exit 0
