#!/bin/bash
#
# .---.                  .              .
# |                      |              |
# |--- .--. .-.  .-.  .-.|  .-. .--.--. |.-.  .-. .--.  .-.
# |    |   (.-' (.-' (   | (   )|  |  | |   )(   )|  | (.-'
# '    '     --'  --'  -' -  -' '  '   -' -'   -' '   -  --'
#
#                    Freedom in the Cloud
#
# PeerTube server
#
# There's a problem with installing this onto mesh images, which is
# that qemu appears to run out of RAM when using yarn to add webpack.
#
# License
# =======
#
# Copyright (C) 2017-2018 Bob Mottram <bob@freedombone.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VARIANTS="full full-vim media"

IN_DEFAULT_INSTALL=0
SHOW_ON_ABOUT=1

PEERTUBE_DOMAIN_NAME=
PEERTUBE_CODE=
PEERTUBE_REPO="https://github.com/Chocobozzz/PeerTube"
PEERTUBE_COMMIT='f209b32afaffbb8b93c265525ebde182ab66c37a'
PEERTUBE_ONION_PORT=8136
PEERTUBE_PORT=9004
MESH_PEERTUBE_PORT=8500
PEERTUBE_DIR=/etc/peertube

peertube_variables=(PEERTUBE_DOMAIN_NAME
                    PEERTUBE_CODE
                    PEERTUBE_ADMIN_PASSWORD
                    ONION_ONLY
                    DDNS_PROVIDER
                    MY_USERNAME
                    ARCHITECTURE
                    MY_EMAIL_ADDRESS)

function peertube_import_from_syncthing {
    peertubedomain="https://$PEERTUBE_DOMAIN_NAME"
    nodecmd='node'

    if [[ "$ONION_ONLY" != 'no' ]]; then
        peertubedomain="http://$(cat /var/lib/tor/hidden_service_peertube/hostname)"
        nodecmd='torsocks node'
    fi

    { echo '#!/bin/bash';
      echo '';
      echo 'LOCKFILE=/tmp/.peertube.lock';
      echo '';
      echo 'if [ -f /root/.peertube.lock ]; then';
      echo "    lockctr=\$(cat \$LOCKFILE)";
      echo "    lockctr=\$((lockctr+1))";
      echo "    echo \"\$lockctr\" > \$LOCKFILE";
      echo "    if [ \$lockctr -ge 30 ]; then";
      echo "        rm \$LOCKFILE";
      echo '    else';
      echo '        exit 0';
      echo '    fi';
      echo 'fi';
      echo '';
      echo "MY_USERNAME=\$(cat /root/${PROJECT_NAME}.cfg | grep MY_USERNAME | awk -F '=' '{print \$2}')";
      echo "if [ ! \"\$MY_USERNAME\" ]; then";
      echo '    exit 0';
      echo 'fi';
      echo '';
      echo "search_dir=/home/\$MY_USERNAME/Sync/peertube_upload";
      echo "if [ ! -f \$search_dir/login.txt ]; then";
      echo '    exit 0';
      echo 'fi';
      echo "import_script=${PEERTUBE_DIR}/dist/server/tools/upload.js";
      echo "if [ ! -f \$import_script ]; then";
      echo '    exit 0';
      echo 'fi';
      echo '';
      echo "peertubedomain=\"$peertubedomain\"";
      echo "peertubeuser=\$(sed -n 1p < \"\$search_dir/login.txt\")";
      echo "peertubepassword=\$(sed -n 2p < \"\$search_dir/login.txt\")";
      echo 'peertubensfw=';
      echo "if grep -q 'nsfw' \"\$search_dir/login.txt\"; then";
      echo "    peertubensfw='--nsfw'";
      echo 'fi';
      echo "if grep -q 'NSFW' \"\$search_dir/login.txt\"; then";
      echo "    peertubensfw='--nsfw'";
      echo 'fi';
      echo '';
      echo "peertubeprivate='-P 3'";
      echo "if grep -q 'public' \"\$search_dir/login.txt\"; then";
      echo "    peertubeprivate='-P 1'";
      echo 'fi';
      echo "if grep -q 'Public' \"\$search_dir/login.txt\"; then";
      echo "    peertubeprivate='-P 1'";
      echo 'fi';
      echo '';
      echo 'failed_uploads=0';
      echo '';
      echo "cd ${PEERTUBE_DIR} || exit 32468356";
      echo "echo \"0\" > \$LOCKFILE";
      echo '';
      echo "for video_file in \$search_dir/*; do";
      echo "    if [[ \"\$video_file\" == *'.ogv' || \"\$video_file\" == *'.mp4' || \"\$video_file\" == *'.webm' ]]; then";
      echo "        if ! grep -q \"\$video_file\" /root/.peertube_uploaded; then";
      echo "            peertubetitle=\$(basename \"\$video_file\" | awk -F '.' '{print \$1}' | sed 's|_| |g' | sed 's|-| |g')";
      echo "            if $nodecmd \$import_script -n \"\$peertubetitle\" \$peertubensfw \$peertubeprivate -u \"\$peertubedomain\" -U \"\$peertubeuser\" --password \"\$peertubepassword\" -f \"\$video_file\"; then";
      echo "                echo \"\$video_file\" >> /root/.peertube_uploaded";
      echo "                rm \$LOCKFILE";
      echo "                exit 0";
      echo '            else';
      echo "                failed_uploads=\$((failed_uploads+1))";
      echo "                if [ \$failed_uploads -gt 1 ]; then";
      echo "                    rm \$LOCKFILE";
      echo '                    exit 0';
      echo '                fi';
      echo '            fi';
      echo '        fi';
      echo '    fi';
      echo 'done';
      echo '';
      echo "rm \$LOCKFILE"; } > /usr/bin/peertubesync

    chmod +x /usr/bin/peertubesync
    cron_add_mins 1 /usr/bin/peertubesync
}

function peertube_create_database {
    if [ -f "$IMAGE_PASSWORD_FILE" ]; then
        PEERTUBE_ADMIN_PASSWORD="$(printf "%s" "$(cat "$IMAGE_PASSWORD_FILE")")"
    else
        if [ ! "$PEERTUBE_ADMIN_PASSWORD" ]; then
            PEERTUBE_ADMIN_PASSWORD="$(create_password "${MINIMUM_PASSWORD_LENGTH}")"
        fi
    fi
    if [ ! "$PEERTUBE_ADMIN_PASSWORD" ]; then
        return
    fi

    systemctl restart postgresql
    run_system_query_postgresql "CREATE USER peertube WITH PASSWORD '$PEERTUBE_ADMIN_PASSWORD';"
    run_system_query_postgresql "CREATE DATABASE peertube OWNER peertube;"
    run_system_query_postgresql "GRANT ALL PRIVILEGES ON DATABASE peertube to peertube;"
    run_system_query_postgresql "set statement_timeout to 40000;"
}

function logging_on_peertube {
    echo -n ''
}

function logging_off_peertube {
    echo -n ''
}

function remove_user_peertube {
    echo -n ''
#    remove_username="$1"
}

function add_user_peertube {
    if [[ $(app_is_installed peertube) == "0" ]]; then
        echo '0'
        return
    fi

#    new_username="$1"
#    new_user_password="$2"

    echo '0'
}

function install_interactive_peertube {
    if [ ! "$ONION_ONLY" ]; then
        ONION_ONLY='no'
    fi

    if [[ $ONION_ONLY != "no" ]]; then
        PEERTUBE_DOMAIN_NAME='peertube.local'
        write_config_param "PEERTUBE_DOMAIN_NAME" "$PEERTUBE_DOMAIN_NAME"
    else
        function_check interactive_site_details
        interactive_site_details "peertube" "PEERTUBE_DOMAIN_NAME" "PEERTUBE_CODE"
    fi
    APP_INSTALLED=1
}

function peertube_set_admin_email {
    read_config_param "$MY_EMAIL_ADDRESS"
    data=$(mktemp 2>/dev/null)
    dialog --title $"Set PeerTube administrator email address" \
           --backtitle $"Freedombone Control Panel" \
           --inputbox $"Admin email address" 8 75 "$MY_EMAIL_ADDRESS" 2>"$data"
    sel=$?
    case $sel in
        0)  peertube_email=$(<"$data")
            if [[ "$peertube_email" != *' '* && "$peertube_email" != *','* && "$peertube_email" != *';'* && "$peertube_email" == *'@'* && "$peertube_email" == *'.'* ]]; then
                if [ ${#peertube_email} -gt 8 ]; then
                    sed -i "s|email:.*|email: '${peertube_email}'|g" $PEERTUBE_DIR/config/production.yaml
                    systemctl restart peertube
                    dialog --title $"Set PeerTube administrator email address" \
                           --msgbox $"Set to $peertube_email" 6 75
                fi
            fi
            ;;
    esac
    rm -f "$data"
}

function peertube_disable_signups {
    dialog --title $"Disable PeerTube signups" \
           --backtitle $"Freedombone Control Panel" \
           --yesno $"\\nDo you wish to disable further PeerTube signups?" 8 75
    sel=$?
    case $sel in
        0) sed -i "0,/enabled:.*/s//enabled: false/" $PEERTUBE_DIR/config/production.yaml;;
        1) sed -i "0,/enabled:.*/s//enabled: true/" $PEERTUBE_DIR/config/production.yaml;;
        255) return;;
    esac

    systemctl restart peertube
}

function peertube_import_from_file {
    read_config_param MY_USERNAME
    read_config_param PEERTUBE_DOMAIN_NAME
    read_config_param ONION_ONLY

    data2=$(mktemp 2>/dev/null)
    dialog --backtitle $"Freedombone Control Panel" \
           --title $"Import Video from file" \
           --form $"Enter your PeerTube login details and video title" 10 65 4 \
           $"Username:" 1 1 "$MY_USERNAME" 1 18 16 15 \
           $"Password:" 2 1 "" 2 18 40 10000 \
           $"Video Title:" 3 1 "" 3 18 40 1000 \
           $"NSFW:" 4 1 $"no" 4 18 4 4 \
           2> "$data2"
    sel=$?
    case $sel in
        1) rm -f "$data2"
           return;;
        255) rm -f "$data2"
             return;;
    esac
    peertubeuser=$(sed -n 1p < "$data2")
    peertubepassword=$(sed -n 2p < "$data2")
    peertubetitle=$(sed -n 3p < "$data2")
    peertubensfw=$(sed -n 4p < "$data2")
    rm -f "$data2"

    peertubedomain="https://$PEERTUBE_DOMAIN_NAME"
    nodecmd='node'

    if [[ "$ONION_ONLY" != 'no' ]]; then
        peertubedomain="http://$(cat /var/lib/tor/hidden_service_peertube/hostname)"
        nodecmd='torsocks node'
    fi

    data2=$(mktemp 2>/dev/null)
    dialog --title "Choose the video file (select with spacebar)" --fselect "/home/$MY_USERNAME/" 30 60 2> "$data2"
    selected_file=$(cat "$data2")
    rm -f "$data2"
    if [ ! "$selected_file" ]; then
        return
    fi
    if [[ "$selected_file" != *'.ogv' && "$selected_file" != *'.mp4' && "$selected_file" != *'.webm' ]]; then
        dialog --title $"Import video from file" \
               --msgbox $"The video should be in ogv, mp4 or webm format" 6 75
        return
    fi

    cd $PEERTUBE_DIR || exit 32468356
    import_script=$PEERTUBE_DIR/dist/server/tools/upload.js
    if [ ! -f $import_script ]; then
        dialog --title $"Import videos" \
               --msgbox $"upload script was not found" 6 75
        return
    fi

    nsfwstr=
    if [[ "$peertubensfw" == *'y'* || "$peertubensfw" == *'Y'* ]]; then
        nsfwstr='--nsfw'
    fi

    titlestr=$(basename "$selected_file" | awk -F '.' '{print $1}' | sed 's|_| |g' | sed 's|-| |g')
    if [ "$peertubetitle" ]; then
        titlestr="-n \"$peertubetitle\""
    fi

    clear
    $nodecmd $import_script $nsfwstr "$titlestr" -u "$peertubedomain" -U "$peertubeuser" --password "$peertubepassword" -f "$selected_file"

    dialog --title $"Import video from file" \
           --msgbox $"Video imported from $selected_file" 6 75
}

function peertube_import_videos {
    read_config_param MY_USERNAME
    read_config_param PEERTUBE_DOMAIN_NAME
    read_config_param ONION_ONLY

    data2=$(mktemp 2>/dev/null)
    dialog --backtitle $"Freedombone Control Panel" \
           --title $"Import Videos from legacy sites" \
           --form $"Enter a channel of video URL for YouTube/Vimeo/Dailymotion" 10 75 4 \
           $"Username:" 1 1 "$MY_USERNAME" 1 22 16 15 \
           $"Password:" 2 1 "" 2 22 50 10000 \
           $"Video/Channel URL:" 3 1 "" 3 22 50 10000 \
           2> "$data2"
    sel=$?
    case $sel in
        1) rm -f "$data2"
           return;;
        255) rm -f "$data2"
             return;;
    esac
    peertubeuser=$(sed -n 1p < "$data2")
    peertubepassword=$(sed -n 2p < "$data2")
    video_url=$(sed -n 3p < "$data2")
    rm -f "$data2"

    peertubedomain="https://$PEERTUBE_DOMAIN_NAME"
    nodecmd='node'

    if [[ "$ONION_ONLY" != 'no' ]]; then
        peertubedomain="http://$(cat /var/lib/tor/hidden_service_peertube/hostname)"
        nodecmd='torsocks node'
    fi

    if [ ${#peertubeuser} -lt 3 ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Username was not valid" 6 75
        return
    fi

    if [ ${#peertubepassword} -lt 3 ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Password was not valid" 6 75
        return
    fi

    if [[ "$video_url" == *' '* || "$video_url" == *','* || "$video_url" == *'@'* ]]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Video/channel URL was not valid" 6 75
        return
    fi

    if [ ${#video_url} -lt 8 ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"Video/channel URL was not valid" 6 75
        return
    fi

    cd $PEERTUBE_DIR || exit 32468356
    import_script=$PEERTUBE_DIR/dist/server/tools/import-videos.js
    if [ ! -f $import_script ]; then
        dialog --title $"Import videos from legacy sites" \
               --msgbox $"import-videos script was not found" 6 75
        return
    fi

    clear
    $nodecmd $import_script -u "$peertubedomain" -U "$peertubeuser" --password "$peertubepassword" -t "$video_url"

    dialog --title $"Import videos from legacy sites" \
           --msgbox $"Video/s imported from $video_url" 6 75
}

function configure_interactive_peertube {
    while true
    do
        data=$(mktemp 2>/dev/null)
        dialog --backtitle $"Freedombone Control Panel" \
               --title $"PeerTube" \
               --radiolist $"Choose an operation:" 12 70 6 \
               1 $"Set administrator email address" off \
               2 $"Disable or enable signups" off \
               3 $"Import videos from YouTube/Vimeo/Dailymotion" off \
               4 $"Import video from file" off \
               5 $"Exit" on 2> "$data"
        sel=$?
        case $sel in
            1) break;;
            255) break;;
        esac
        case $(cat "$data") in
            1) peertube_set_admin_email;;
            2) peertube_disable_signups;;
            3) peertube_import_videos;;
            4) peertube_import_from_file;;
            5) rm -f "$data"
               break;;
        esac
        rm -f "$data"
    done
}

function change_password_peertube {
#    PEERTUBE_USERNAME="$1"
    PEERTUBE_PASSWORD="$2"
    if [ ${#PEERTUBE_PASSWORD} -lt 8 ]; then
        echo $'Peertube password is too short'
        return
    fi
    #"${PROJECT_NAME}-pass" -u "$PEERTUBE_USERNAME" -a peertube -p "$PEERTUBE_PASSWORD"
}

function reconfigure_peertube {
    echo -n ''
}

function upgrade_peertube {
    peertube_import_from_syncthing

    CURR_PEERTUBE_COMMIT=$(get_completion_param "peertube commit")
    if [[ "$CURR_PEERTUBE_COMMIT" == "$PEERTUBE_COMMIT" ]]; then
        return
    fi

    read_config_param PEERTUBE_DOMAIN_NAME
    systemctl stop peertube
    cd "$PEERTUBE_DIR" || exit 7824552627

    function_check set_repo_commit
    set_repo_commit $PEERTUBE_DIR "peertube commit" "$PEERTUBE_COMMIT" $PEERTUBE_REPO

    npm run upgrade-peertube
    chown -R peertube:peertube $PEERTUBE_DIR
    systemctl start peertube
}

function backup_local_peertube {
    PEERTUBE_DOMAIN_NAME='peertube.local'
    if grep -q "peertube domain" "$COMPLETION_FILE"; then
        PEERTUBE_DOMAIN_NAME=$(get_completion_param "peertube domain")
    fi

    systemctl stop peertube
    USE_POSTGRESQL=1
    function_check backup_database_to_usb
    backup_database_to_usb peertube
    systemctl start peertube

    peertube_path=$PEERTUBE_DIR/videos
    if [ -d $peertube_path ]; then
        suspend_site "${PEERTUBE_DOMAIN_NAME}"
        systemctl stop peertube
        backup_directory_to_usb $peertube_path peertubevideos
        systemctl start peertube
        restart_site
    fi
}

function restore_local_peertube {
    PEERTUBE_DOMAIN_NAME='peertube.local'
    if grep -q "peertube domain" "$COMPLETION_FILE"; then
        PEERTUBE_DOMAIN_NAME=$(get_completion_param "peertube domain")
    fi
    if [ "$PEERTUBE_DOMAIN_NAME" ]; then
        suspend_site "${PEERTUBE_DOMAIN_NAME}"
        systemctl stop peertube

        USE_POSTGRESQL=1
        restore_database peertube

        temp_restore_dir=/root/temppeertubevideos
        function_check restore_directory_from_usb
        restore_directory_from_usb $temp_restore_dir peertubevideos
        if [ -d $temp_restore_dir ]; then
            if [ -d $temp_restore_dir$PEERTUBE_DIR/videos ]; then
                cp -r $temp_restore_dir$PEERTUBE_DIR/videos/* $PEERTUBE_DIR/videos/
            else
                cp -r $temp_restore_dir/* $PEERTUBE_DIR/videos/
            fi
            chown -R peertube:peertube $PEERTUBE_DIR
            rm -rf $temp_restore_dir
        fi

        systemctl start peertube
        restart_site
    fi
}

function backup_remote_peertube {
    PEERTUBE_DOMAIN_NAME='peertube.local'
    if grep -q "peertube domain" "$COMPLETION_FILE"; then
        PEERTUBE_DOMAIN_NAME=$(get_completion_param "peertube domain")
    fi

    systemctl stop peertube
    USE_POSTGRESQL=1
    function_check backup_database_to_friend
    backup_database_to_friend peertube
    systemctl start peertube

    temp_backup_dir=$PEERTUBE_DIR/videos
    if [ -d $temp_backup_dir ]; then
        systemctl stop peertube
        suspend_site "${PEERTUBE_DOMAIN_NAME}"
        backup_directory_to_friend $temp_backup_dir peertubevideos
        restart_site
        systemctl start peertube
    else
        echo $"Peertube domain specified but not found in $temp_backup_dir"
        exit 6383523
    fi
}

function restore_remote_peertube {
    PEERTUBE_DOMAIN_NAME='peertube.local'
    if grep -q "peertube domain" "$COMPLETION_FILE"; then
        PEERTUBE_DOMAIN_NAME=$(get_completion_param "peertube domain")
    fi
    suspend_site "${PEERTUBE_DOMAIN_NAME}"

    systemctl stop peertube

    # shellcheck disable=SC2034
    USE_POSTGRESQL=1
    function_check restore_database_from_friend
    restore_database_from_friend peertube

    temp_restore_dir=/root/temppeertubevideos
    function_check restore_directory_from_friend
    restore_directory_from_friend $temp_restore_dir peertubevideos
    if [ -d $temp_restore_dir ]; then
        if [ -d $temp_restore_dir$PEERTUBE_DIR/videos ]; then
            cp -r $temp_restore_dir$PEERTUBE_DIR/videos/* $PEERTUBE_DIR/videos/
        else
            cp -r $temp_restore_dir/* $PEERTUBE_DIR/videos/
        fi
        chown -R peertube: $PEERTUBE_DIR
        rm -rf $temp_restore_dir
    fi

    systemctl start peertube
    restart_site
}

function remove_peertube {
    if [ ${#PEERTUBE_DOMAIN_NAME} -eq 0 ]; then
        return
    fi

    systemctl stop peertube
    systemctl disable peertube
    rm /etc/systemd/system/peertube.service
    systemctl daemon-reload

    function_check remove_nodejs
    remove_nodejs peertube

    read_config_param "PEERTUBE_DOMAIN_NAME"
    nginx_dissite "$PEERTUBE_DOMAIN_NAME"
    remove_certs "${PEERTUBE_DOMAIN_NAME}"
    if [ -f "/etc/nginx/sites-available/$PEERTUBE_DOMAIN_NAME" ]; then
        rm -f "/etc/nginx/sites-available/$PEERTUBE_DOMAIN_NAME"
    fi
    if [ -d "/var/www/$PEERTUBE_DOMAIN_NAME" ]; then
        rm -rf "/var/www/$PEERTUBE_DOMAIN_NAME"
    fi
    remove_config_param PEERTUBE_DOMAIN_NAME
    remove_config_param PEERTUBE_CODE
    function_check remove_onion_service
    remove_onion_service peertube ${PEERTUBE_ONION_PORT}
    remove_completion_param "install_peertube"
    sed -i '/peertube/d' "$COMPLETION_FILE"
    sed -i '/peertubesync/d' /etc/crontab

    if [ -f /usr/bin/peertubesync ]; then
        rm /usr/bin/peertubesync
    fi
    if [ -f /root/peertube_uploaded ]; then
        rm /root/peertube_uploaded
    fi

    function_check drop_database_postgresql
    drop_database_postgresql peertube peertube

    groupdel -f peertube
    userdel -r peertube

    if [ -d $PEERTUBE_DIR ]; then
        rm -rf $PEERTUBE_DIR
    fi

    function_check remove_ddns_domain
    remove_ddns_domain "$PEERTUBE_DOMAIN_NAME"
}

function peertube_setup_web {
    peertube_nginx_file=/etc/nginx/sites-available/$PEERTUBE_DOMAIN_NAME

    if [[ $ONION_ONLY == "no" ]]; then
        { echo 'server {';
          echo '  listen 80;';
          echo '  listen [::]:80;';
          echo "  server_name $PEERTUBE_DOMAIN_NAME;";
          echo "  rewrite ^ https://\$server_name\$request_uri? permanent;";
          echo '}';
          echo '';
          echo 'server {';
          echo '  listen 443 ssl http2;';
          echo '  #listen [::]:443 ssl http2;';
          echo "  server_name $PEERTUBE_DOMAIN_NAME;";
          echo ''; } > "$peertube_nginx_file"
        function_check nginx_ssl
        nginx_ssl "$PEERTUBE_DOMAIN_NAME" mobile

        function_check nginx_security_options
        nginx_security_options "$PEERTUBE_DOMAIN_NAME"

        { echo '  add_header Strict-Transport-Security max-age=15768000;';
          echo '';
          echo '  location / {';
          echo "    proxy_pass http://localhost:${PEERTUBE_PORT};";
          echo "    proxy_set_header X-Real-IP \$remote_addr;";
          echo "    proxy_set_header Host \$host;";
          echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
          echo '';
          echo '    # For the video upload';
          echo '    client_max_body_size 2G;';
          echo '  }';
          echo '';
          echo '  location /static/webseed {';
          echo "    if (\$request_method = 'OPTIONS') {";
          echo "      add_header 'Access-Control-Allow-Origin' '*';";
          echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
          echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
          echo "      add_header 'Access-Control-Max-Age' 1728000;";
          echo "      add_header 'Content-Type' 'text/plain charset=UTF-8';";
          echo "      add_header 'Content-Length' 0;";
          echo '      return 204;';
          echo '    }';
          echo '';
          echo "    if (\$request_method = 'GET') {";
          echo "      add_header 'Access-Control-Allow-Origin' '*';";
          echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
          echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
          echo '    }';
          echo '';
          echo "    alias $PEERTUBE_DIR/videos;";
          echo '  }';
          echo '';
          echo '  # Websocket tracker';
          echo '  location /tracker/socket {';
          echo '    # Peers send a message to the tracker every 15 minutes';
          echo '    # Dont close the websocket before this time';
          echo '    proxy_read_timeout 1200s;';
          echo "    proxy_set_header Upgrade \$http_upgrade;";
          echo '    proxy_set_header Connection "upgrade";';
          echo '    proxy_http_version 1.1;';
          echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
          echo "    proxy_set_header Host \$host;";
          echo "    proxy_pass http://localhost:${PEERTUBE_PORT};";
          echo '  }';
          echo '}'; } >> "$peertube_nginx_file"
    else
        echo -n '' > "$peertube_nginx_file"
    fi
    { echo 'server {';
      echo "  listen 127.0.0.1:$PEERTUBE_ONION_PORT default_server;";
      echo "  server_name $PEERTUBE_ONION_HOSTNAME;";
      echo '';
      echo '  location / {';
      echo "    proxy_pass http://localhost:${PEERTUBE_PORT};";
      echo "    proxy_set_header X-Real-IP \$remote_addr;";
      echo "    proxy_set_header Host \$host;";
      echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
      echo '';
      echo '    # For the video upload';
      echo '    client_max_body_size 2G;';
      echo '  }';
      echo '';
      echo '  location /static/webseed {';
      echo "    if (\$request_method = 'OPTIONS') {";
      echo "      add_header 'Access-Control-Allow-Origin' '*';";
      echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
      echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
      echo "      add_header 'Access-Control-Max-Age' 1728000;";
      echo "      add_header 'Content-Type' 'text/plain charset=UTF-8';";
      echo "      add_header 'Content-Length' 0;";
      echo '      return 204;';
      echo '    }';
      echo '';
      echo "    if (\$request_method = 'GET') {";
      echo "      add_header 'Access-Control-Allow-Origin' '*';";
      echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
      echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
      echo '    }';
      echo '';
      echo "    alias $PEERTUBE_DIR/videos;";
      echo '  }';
      echo '';
      echo '  # Websocket tracker';
      echo '  location /tracker/socket {';
      echo '    # Peers send a message to the tracker every 15 minutes';
      echo '    # Dont close the websocket before this time';
      echo '    proxy_read_timeout 1200s;';
      echo "    proxy_set_header Upgrade \$http_upgrade;";
      echo '    proxy_set_header Connection "upgrade";';
      echo '    proxy_http_version 1.1;';
      echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
      echo "    proxy_set_header Host \$host;";
      echo "    proxy_pass http://localhost:${PEERTUBE_PORT};";
      echo '  }';
      echo '}'; } >> "$peertube_nginx_file"

    # CSP currently causes an error
    sed -i '/Content-Security-Policy/d' "$peertube_nginx_file"

    function_check create_site_certificate
    create_site_certificate "$PEERTUBE_DOMAIN_NAME" 'yes'

    function_check nginx_ensite
    nginx_ensite "$PEERTUBE_DOMAIN_NAME"
}

function mesh_peertube_setup_web {
    # shellcheck disable=SC2154
    peertube_nginx_file=$rootdir/etc/nginx/sites-available/peertube

    { echo 'server {';
      echo "  listen $MESH_PEERTUBE_PORT http2;";
      echo "  listen [::]:\$MESH_PEERTUBE_PORT http2;";
      echo "  server_name \$HOSTNAME;";
      echo '';
      echo '  location / {';
      echo "    proxy_pass http://localhost:${PEERTUBE_PORT};";
      echo "    proxy_set_header X-Real-IP \$remote_addr;";
      echo "    proxy_set_header Host \$host;";
      echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
      echo '';
      echo '    # For the video upload';
      echo '    client_max_body_size 2G;';
      echo '  }';
      echo '';
      echo '  location /static/webseed {';
      echo "    if (\$request_method = 'OPTIONS') {";
      echo "      add_header 'Access-Control-Allow-Origin' '*';";
      echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
      echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
      echo "      add_header 'Access-Control-Max-Age' 1728000;";
      echo "      add_header 'Content-Type' 'text/plain charset=UTF-8';";
      echo "      add_header 'Content-Length' 0;";
      echo '      return 204;';
      echo '    }';
      echo '';
      echo "    if (\$request_method = 'GET') {";
      echo "      add_header 'Access-Control-Allow-Origin' '*';";
      echo "      add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';";
      echo "      add_header 'Access-Control-Allow-Headers' 'Range,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';";
      echo '    }';
      echo '';
      echo "    alias $PEERTUBE_DIR/videos;";
      echo '  }';
      echo '';
      echo '  # Websocket tracker';
      echo '  location /tracker/socket {';
      echo '    # Peers send a message to the tracker every 15 minutes';
      echo '    # Dont close the websocket before this time';
      echo '    proxy_read_timeout 1200s;';
      echo "    proxy_set_header Upgrade \$http_upgrade;";
      echo "    proxy_set_header Connection \"upgrade\";";
      echo '    proxy_http_version 1.1;';
      echo "    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;";
      echo "    proxy_set_header Host \$host;";
      echo "    proxy_pass http://localhost:${PEERTUBE_PORT};";
      echo '  }';
      echo '}'; } > "$peertube_nginx_file"
}

function peertube_create_config {
    peertube_prefix=$1

    peertube_config_file=$peertube_prefix$PEERTUBE_DIR/config/production.yaml

    { echo 'listen:';
      echo "  port: $PEERTUBE_PORT";
      echo '';
      echo '# Correspond to your reverse proxy "listen" configuration';
      echo 'webserver:'; } > "$peertube_config_file"
    if [ ! "$peertube_prefix" ]; then
        if [[ "$ONION_ONLY" == 'no' ]]; then
            { echo '  https: true';
              echo "  hostname: '$PEERTUBE_DOMAIN_NAME'";
              echo '  port: 443'; } >> "$peertube_config_file"
        else
            { echo '  https: false';
              echo "  hostname: '$PEERTUBE_ONION_HOSTNAME'";
              echo '  port: 80'; } >> "$peertube_config_file"
        fi
    else
        { echo '  https: false';
          echo "  hostname: ''";
          echo "  port: $MESH_PEERTUBE_PORT"; } >> "$peertube_config_file"
    fi
    { echo '';
      echo '# Your database name will be "peertube"+database.suffix';
      echo 'database:';
      echo "  hostname: 'localhost'";
      echo '  port: 5432';
      echo "  suffix: ''";
      echo "  username: 'peertube'"; } >> "$peertube_config_file"
    if [ ! "$peertube_prefix" ]; then
        echo "  password: '$PEERTUBE_ADMIN_PASSWORD'" >> "$peertube_config_file"
    else
        echo "  password: ''" >> "$peertube_config_file"
    fi
    { echo '';
      echo '# From the project root directory';
      echo 'storage:';
      echo "  certs: 'certs/'";
      echo "  videos: 'videos/'";
      echo "  logs: 'logs/'";
      echo "  previews: 'previews/'";
      echo "  thumbnails: 'thumbnails/'";
      echo "  torrents: 'torrents/'";
      echo "  cache: 'cache/'";
      echo '';
      echo 'cache:';
      echo '  previews:';
      echo '    size: 10 # Max number of previews you want to cache';
      echo '';
      echo 'admin:';
      # This is deliberately a dummy email address
      echo "  email: 'testuser@testdomain.net'";
      echo '';
      echo 'signup:';
      echo '  enabled: true';
      echo '  limit: 5 # When the limit is reached, registrations are disabled. -1 == unlimited';
      echo '';
      echo 'user:';
      echo '  # Default value of maximum video BYTES the user can upload (does not take into account transcoded files).';
      echo '  # -1 == unlimited';
      echo '  video_quota: -1';
      echo '';
      echo '# If enabled, the video will be transcoded to mp4 (x264) with "faststart" flag';
      echo '# Uses a lot of CPU!';
      echo 'transcoding:';
      echo '  enabled: true';
      echo '  threads: 2';
      echo '  resolutions: # Only created if the original video has a higher resolution';
      echo '    240p: true';
      echo '    360p: false';
      echo '    480p: false';
      echo '    720p: false';
      echo '    1080p: false'; } >> "$peertube_config_file"
}

function mesh_install_peertube {
    # shellcheck disable=SC2153
    if [[ "$VARIANT" != "meshclient" && "$VARIANT" != "meshusb" ]]; then
        return
    fi
    if [[ "$ARCHITECTURE" != 'x86_64' && "$ARCHITECTURE" != 'amd64' ]]; then
        return
    fi

    chroot "$rootdir" apt-get -yq install ffmpeg curl redis-tools redis-server

    function_check install_postgresql
    install_postgresql

    if [ -d "$rootdir$PEERTUBE_DIR" ]; then
        rm -rf "$rootdir$PEERTUBE_DIR"
    fi

    git clone "$PEERTUBE_REPO" "$rootdir$PEERTUBE_DIR"

    chroot "$rootdir" groupadd peertube
    chroot "$rootdir" useradd -c "PeerTube system account" -d $PEERTUBE_DIR -m -r -g peertube peertube

    cd "$rootdir$PEERTUBE_DIR" || exit 246824524
    git checkout $PEERTUBE_COMMIT -b $PEERTUBE_COMMIT

    get_npm_arch

    cat <<EOF > "$rootdir/usr/bin/install_peertube"
#!/bin/bash
cd $PEERTUBE_DIR
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
apt-get -y update
apt-get -yq install yarn

#if ! npm install --arch=$NPM_ARCH -g yarn@1.5.1; then
#    echo $'PeerTube Failed to install yarn'
#    exit 79353234
#fi
#if ! npm install --arch=$NPM_ARCH webpack@3.10.0 --no-optional; then
#    echo $'PeerTube failed to install webpack'
#    exit 68386353
#fi
yarn install
yarn run build:prod
if ! yarn add -D webpack; then
    echo $'PeerTube failed to add webpack'
    exit 67342823
fi
if ! yarn install --ignore-optional; then
    echo $'PeerTube failed to run yarn install'
    exit 63754235
fi
if ! npm install --arch=$NPM_ARCH -g npm@4; then
    # https://github.com/KraigM/homebridge-harmonyhub/issues/119
    echo $'Failed to downgrade npm'
    exit 3476835
fi
cp /root/.npm-global/bin/npm /usr/local/bin/npm
if ! npm install --arch=$NPM_ARCH; then
    echo $'PeerTube failed to install peertube'
    exit 7835243
fi
if ! npm install --arch=$NPM_ARCH -g "npm@${NPM_VERSION}"; then
    echo $'Failed to restore npm after downgrade'
    exit 5737583
fi
cp /root/.npm-global/bin/npm /usr/local/bin/npm
if ! npm run build --arch=$NPM_ARCH; then
    echo $'PeerTube failed to build peertube'
    exit 5293593
fi
EOF
    chmod +x "$rootdir/usr/bin/install_peertube"
    if ! chroot "$rootdir" /usr/bin/install_peertube; then
        echo $'PeerTube install failed'
        exit 735638
    fi

    { echo '[Unit]';
      echo 'Description=PeerTube Decentralized video streaming platform';
      echo 'After=syslog.target';
      echo 'After=network.target';
      echo '';
      echo '[Service]';
      echo 'User=peertube';
      echo 'Group=peertube';
      echo "WorkingDirectory=$PEERTUBE_DIR";
      echo "ExecStart=/usr/local/bin/npm start";
      echo "ExecStop=/usr/local/bin/npm stop";
      echo 'StandardOutput=syslog';
      echo 'StandardError=syslog';
      echo 'SyslogIdentifier=peertube';
      echo 'Restart=always';
      echo "Environment=NODE_ENV=production";
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > "$rootdir/etc/systemd/system/peertube.service"

    peertube_create_config "$rootdir"

    chroot "$rootdir" chown -R peertube:peertube $PEERTUBE_DIR

    mesh_peertube_setup_web
}

function install_peertube {
    if [[ $VARIANT == "mesh"* ]]; then
        mesh_install_peertube
        return
    fi
    if [[ $ARCHITECTURE != 'x86_64' && $ARCHITECTURE != 'amd64' ]]; then
        return
    fi

    if [ ! $ONION_ONLY ]; then
        ONION_ONLY='no'
    fi

    if [ ! "$PEERTUBE_DOMAIN_NAME" ]; then
        echo $'The peertube domain name was not specified'
        exit 783523
    fi

    apt-get -yq install ffmpeg redis-tools redis-server

    function_check install_postgresql
    install_postgresql

    if [ ! -d "/var/www/$PEERTUBE_DOMAIN_NAME/htdocs" ]; then
        mkdir -p "/var/www/$PEERTUBE_DOMAIN_NAME/htdocs"
    fi

    if [ -d $PEERTUBE_DIR ]; then
        rm -rf $PEERTUBE_DIR
    fi

    groupadd peertube
    useradd -c "PeerTube system account" -d $PEERTUBE_DIR -m -r -g peertube peertube

    peertube_create_database

    function_check install_nodejs
    install_nodejs peertube

    if [ -d /repos/peertube ]; then
        mkdir -p $PEERTUBE_DIR
        cp -r -p /repos/peertube/. $PEERTUBE_DIR
        cd "$PEERTUBE_DIR" || exit 642874682
        git pull
    else
        function_check git_clone
        git_clone $PEERTUBE_REPO $PEERTUBE_DIR
    fi

    cd "$PEERTUBE_DIR" || exit 27492742
    git checkout $PEERTUBE_COMMIT -b $PEERTUBE_COMMIT
    set_completion_param "peertube commit" "$PEERTUBE_COMMIT"

    if ! npm install -g yarn@1.5.1; then
        echo $'Failed to install yarn'
        exit 79353234
    fi
    yarn add -D webpack --network-concurrency 1
    if ! yarn install; then
        echo $'Failed to run yarn install'
        exit 63754235
    fi
    if ! npm install -g npm@4; then
        # https://github.com/KraigM/homebridge-harmonyhub/issues/119
        echo $'Failed to downgrade npm'
        exit 3476835
    fi
    cp /root/.npm-global/bin/npm /usr/local/bin/npm
    if ! npm install; then
        echo $'Failed to install peertube'
        exit 7835243
    fi
    if ! npm install -g "npm@${NPM_VERSION}"; then
        echo $'Failed to restore npm after downgrade'
        exit 5737583
    fi
    cp /root/.npm-global/bin/npm /usr/local/bin/npm
    if ! npm run build; then
        echo $'Failed to build peertube'
        exit 5293593
    fi

    PEERTUBE_ONION_HOSTNAME=$(add_onion_service peertube 80 ${PEERTUBE_ONION_PORT})

    { echo '[Unit]';
      echo 'Description=PeerTube Decentralized video streaming platform';
      echo 'After=syslog.target';
      echo 'After=network.target';
      echo '';
      echo '[Service]';
      echo 'User=peertube';
      echo 'Group=peertube';
      echo "WorkingDirectory=$PEERTUBE_DIR";
      echo "ExecStart=/usr/local/bin/npm start";
      echo "ExecStop=/usr/local/bin/npm stop";
      echo 'StandardOutput=syslog';
      echo 'StandardError=syslog';
      echo 'SyslogIdentifier=peertube';
      echo 'Restart=always';
      echo "Environment=NODE_ENV=production";
      echo '';
      echo '[Install]';
      echo 'WantedBy=multi-user.target'; } > /etc/systemd/system/peertube.service

    peertube_create_config

    chown -R peertube:peertube $PEERTUBE_DIR

    peertube_setup_web

    "${PROJECT_NAME}-pass" -u "$MY_USERNAME" -a peertube -p "$PEERTUBE_ADMIN_PASSWORD"

    function_check add_ddns_domain
    add_ddns_domain "$PEERTUBE_DOMAIN_NAME"

    systemctl enable peertube
    systemctl daemon-reload
    systemctl start peertube
    systemctl restart nginx

    # wait for the database to get generated after initial peertube daemon start
    sleep 10

    # update the admin email address after creation of the database
    sed -i "s|email: .*|email: '$MY_EMAIL_ADDRESS'|g" $PEERTUBE_DIR/config/production.yaml

    peertube_import_from_syncthing

    set_completion_param "peertube domain" "$PEERTUBE_DOMAIN_NAME"
    APP_INSTALLED=1
}

# NOTE: deliberately no exit 0
