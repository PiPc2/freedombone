#!/bin/bash
#
# .---.                  .              .
# |                      |              |
# |--- .--. .-.  .-.  .-.|  .-. .--.--. |.-.  .-. .--.  .-.
# |    |   (.-' (.-' (   | (   )|  |  | |   )(   )|  | (.-'
# '    '     --'  --'  -' -  -' '  '   -' -'   -' '   -  --'
#
#                    Freedom in the Cloud
#
# nodejs functions
#
# License
# =======
#
# Copyright (C) 2014-2018 Bob Mottram <bob@freedombone.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# For reasons unknown we initially have to upgrade to an intermediate version
# before getting to the version we want

VARIANTS='mesh'

# change these versions at your peril. Things will often crash if you don't
# have specifically the correct versions
NODEJS_VERSION='8.11.1'
NODEJS_N_VERSION='2.1.7'
NPM_VERSION='5.6.0'

# This file keeps track of the apps needing nodejs
# so that it can be removed if tere are no apps which need it
NODEJS_INSTALLED_APPS_FILE=$HOME/.nodejs-apps

function get_npm_arch {
    N_ARCH='x86'
    NPM_ARCH='ia32'
    if [[ $ARCHITECTURE == 'arm'* ]]; then
        NPM_ARCH='armv7l'
        N_ARCH='armv7l'
    fi
    if [[ $ARCHITECTURE == *"aarch"* ]]; then
        NPM_ARCH='arm64'
        N_ARCH='arm64'
    fi
    if [[ $ARCHITECTURE == 'x86_64' || $ARCHITECTURE == 'amd64' ]]; then
        NPM_ARCH='x64'
        N_ARCH='x64'
    fi
}

function mesh_install_nodejs {
    mesh_install_nodejs_prefix=
    if [ "$rootdir" ]; then
        mesh_install_nodejs_prefix="chroot $rootdir"
    fi

    $mesh_install_nodejs_prefix apt-get -yq install wget curl g++ m4 libtool automake
    $mesh_install_nodejs_prefix apt-get -yq install libxext-dev libxtst-dev libxkbfile-dev
    $mesh_install_nodejs_prefix apt-get -yq install apt-transport-https
    $mesh_install_nodejs_prefix wget https://deb.nodesource.com/gpgkey/nodesource.gpg.key -O /root/node.gpg.key
    if [ ! -f "$rootdir/root/node.gpg.key" ]; then
        echo $'Unable to obtain gpg key for nodejs repo'
        exit 6389252
    fi
    $mesh_install_nodejs_prefix apt-key add /root/node.gpg.key
    echo "deb https://deb.nodesource.com/node_8.x stretch main" > "$rootdir/etc/apt/sources.list.d/nodesource.list"
    echo "deb-src https://deb.nodesource.com/node_8.x stretch main" >> "$rootdir/etc/apt/sources.list.d/nodesource.list"

    $mesh_install_nodejs_prefix apt-mark -q unhold nodejs
    $mesh_install_nodejs_prefix apt-get update
    $mesh_install_nodejs_prefix apt-get -yq remove --purge nodejs

    if [ -d "$rootdir/usr/local/lib/node_modules" ]; then
        rm -rf "$rootdir/usr/local/lib/node_modules"
    fi
    if [ -f "$rootdir/usr/local/bin/node" ]; then
        rm "$rootdir/usr/local/bin/node"
    fi
    if [ -f "$rootdir/usr/bin/node" ]; then
        rm /usr/bin/node
    fi
    if [ -f "$rootdir/usr/bin/nodejs" ]; then
        rm "$rootdir/usr/bin/nodejs"
    fi

    $mesh_install_nodejs_prefix apt-get -yq install nodejs
    $mesh_install_nodejs_prefix apt-mark -q hold nodejs

    if [ -f "$rootdir/usr/bin/nodejs" ]; then
        cp "$rootdir/usr/bin/nodejs" "$rootdir/usr/bin/node"
    fi

    if [ ! -f "${rootdir}/usr/bin/node" ]; then
        if [ ! -f "${rootdir}/usr/local/bin/node" ]; then
            if [ ! -f "${rootdir}/usr/bin/nodejs" ]; then
                echo $'nodejs was not installed'
                exit 63962
            fi
        fi
    fi

    if [ ! -f "$rootdir/usr/bin/node" ]; then
        echo $'/usr/bin/node not found'
        exit 7235728
    fi

    get_npm_arch

    $mesh_install_nodejs_prefix npm config set unsafe-perm true
    $mesh_install_nodejs_prefix npm install --arch=$NPM_ARCH -g npm@${NPM_VERSION} --save
    if [ -f "$rootdir/usr/local/bin/npm" ]; then
        cp "$rootdir/usr/local/bin/npm" /usr/bin/npm
    fi
    cp "$rootdir/usr/bin/npm" "$rootdir/root/npm"

    # update from the old debian nodejs version
    $mesh_install_nodejs_prefix npm install --arch=$NPM_ARCH -g n@${NODEJS_N_VERSION} --save
    $mesh_install_nodejs_prefix n --arch $N_ARCH ${NODEJS_VERSION}
    cp "$rootdir/root/npm" "$rootdir/usr/bin/npm"

    # deliberate second install of npm
    $mesh_install_nodejs_prefix npm install --arch=$NPM_ARCH -g npm@${NPM_VERSION} --save
    if [ -f "$rootdir/usr/local/bin/npm" ]; then
        cp "$rootdir/usr/local/bin/npm" /usr/bin/npm
    fi
    cp "$rootdir/usr/bin/npm" "$rootdir/root/npm"

    # check the version numbers
    cat <<EOF > "$rootdir/usr/bin/test_nodejs_install"
#!/bin/bash
node_version=\$(node -v)
if [[ "\$node_version" != "v${NODEJS_VERSION}" ]]; then
    echo $"nodejs version expected to be ${NODEJS_VERSION} but found \$node_version"
    exit 1
fi
npm_version=\$(npm -v)
if [[ "\$npm_version" != "${NPM_VERSION}" ]]; then
    echo $"npm version expected to be ${NPM_VERSION} but found \$npm_version"
    exit 2
fi
EOF
    chmod +x "$rootdir/usr/bin/test_nodejs_install"
    if ! $mesh_install_nodejs_prefix /usr/bin/test_nodejs_install; then
        echo $"nodejs version numbers did not match. Architecture is $NPM_ARCH."
        exit 76835282
    fi
    rm "$rootdir/usr/bin/test_nodejs_install"
}

function nodejs_upgrade {
    if [ ! -f /etc/apt/sources.list.d/nodesource.list ]; then
        return
    fi
    if grep -q "node_8.x" /etc/apt/sources.list.d/nodesource.list; then
        if [ -f /usr/local/bin/node ]; then
            return
        fi
    fi
    if [ -f /usr/local/bin/node ]; then
        CURR_NODE_VERSION=$(node --version)
        if [[ "$CURR_NODE_VERSION" == "v${NODEJS_VERSION}" ]]; then
            return
        fi
    fi
    rootdir=
    mesh_install_nodejs
}

function remove_nodejs {
    if [ ! "$1" ]; then
        return
    fi
    if [ ! -f "$NODEJS_INSTALLED_APPS_FILE" ]; then
        #remove_app nodejs
        return
    fi
    sed -i "/install_${1}/d" "$NODEJS_INSTALLED_APPS_FILE"
    if ! grep -q "install_" "$NODEJS_INSTALLED_APPS_FILE"; then
        apt-get -yq remove --purge nodejs

        if [ -f /usr/bin/nodejs ]; then
            rm /usr/bin/nodejs
        fi
        if [ -f /usr/local/bin/node ]; then
            rm /usr/local/bin/node
        fi
        if [ -f /usr/bin/node ]; then
            rm /usr/bin/node
        fi
        if [ -d /usr/lib/node_modules ]; then
            rm -rf /usr/lib/node_modules
        fi
        if [ -f /usr/bin/n ]; then
            rm /usr/bin/n
        fi

        remove_app nodejs

        rm "$NODEJS_INSTALLED_APPS_FILE"

        apt-get -yq autoremove
    fi
}

function upgrade_nodejs {
    CURR_NODE_VERSION=$(node --version)
    CURR_NPM_VERSION=$(npm --version)
    CURR_N_VERSION=$(n --version)
    if [[ "$CURR_NPM_VERSION" != "$NPM_VERSION" ]]; then
        npm upgrade -g npm@${NPM_VERSION} --save
    fi
    if [[ "$CURR_N_VERSION" != "$NODEJS_N_VERSION" ]]; then
        npm upgrade -g n@${NODEJS_N_VERSION} --save
    fi
    if [[ "$CURR_NODE_VERSION" != "v${NODEJS_VERSION}" ]]; then
        n ${NODEJS_VERSION}
    fi
    cp /usr/local/bin/n /usr/bin/n
    if [ -f /usr/local/bin/npm ]; then
        cp /usr/local/bin/npm /usr/bin/npm
    fi
    if [ -f /usr/local/bin/node ]; then
        cp /usr/local/bin/node /usr/bin/nodejs
        cp /usr/local/bin/node /usr/bin/node
    fi
}

function install_nodejs {
    if [ "$INSTALLING_MESH" ]; then
        mesh_install_nodejs
        return
    fi
    if [[ $(is_completed "${FUNCNAME[0]}") == "1" ]]; then
        upgrade_nodejs
        return
    fi

    if [ ! "$ARCHITECTURE" ]; then
        ARCHITECTURE=$(uname -m)
    fi
    rootdir=
    mesh_install_nodejs

    # verify nodejs versions are what we expect
    CURR_NODE_VERSION=$(node --version)
    CURR_NPM_VERSION=$(npm --version)
    CURR_N_VERSION=$(n --version)
    if [[ "$CURR_NPM_VERSION" != "$NPM_VERSION" ]]; then
        echo $"Expected npm version $NPM_VERSION but actually have $CURR_NPM_VERSION"
        exit 6728252
    fi
    if [[ "$CURR_N_VERSION" != "$NODEJS_N_VERSION" ]]; then
        echo $"Expected n version $NODEJS_N_VERSION but actually have $CURR_N_VERSION"
        exit 5267452
    fi
    if [[ "$CURR_NODE_VERSION" != "v${NODEJS_VERSION}" ]]; then
        echo $"Expected node version $NODEJS_VERSION but actually have $CURR_NODE_VERSION"
        exit 5274527
    fi

    if [ "$1" ]; then
        if ! grep -q "install_${1}" "$NODEJS_INSTALLED_APPS_FILE"; then
            echo "install_${1}" >> "$NODEJS_INSTALLED_APPS_FILE"
        fi
    fi

    mark_completed "${FUNCNAME[0]}"
}

# NOTE: deliberately there is no "exit 0"
