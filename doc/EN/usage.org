#+TITLE:
#+AUTHOR: Bob Mottram
#+EMAIL: bob@freedombone.net
#+KEYWORDS: freedombox, debian, beaglebone, hubzilla, email, web server, home server, internet, censorship, surveillance, social network, irc, jabber
#+DESCRIPTION: Turn the Beaglebone Black into a personal communications server
#+OPTIONS: ^:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="freedombone.css" />

#+BEGIN_CENTER
[[file:images/logo.png]]
#+END_CENTER

#+BEGIN_EXPORT html
<center>
<h1>Usage</h1>
</center>
#+END_EXPORT

| [[Readme]]                                               |
| [[Improving ssh security]]                               |
| [[Administrating the system via an onion address (Tor)]] |
| [[./mobile.html][Mobile advice]]                                        |
| [[./usage_email.html][Using Email]]                                          |
| [[./app_syncthing.html][Syncing to the Cloud]]                                 |
| [[./app_dlna.html][Play Music]]                                           |
| [[./app_gnusocial.html][Microblogging (GNU Social)]]                           |
| [[./app_hubzilla.html][Social Network]]                                       |
| [[./app_irc.html][Multi-user chat with IRC]]                             |
| [[./app_xmpp.html][XMPP/Jabber]]                                          |
| [[./app_tox.html][Tox]]                                                  |
| [[./app_mumble.html][Mumble]]                                               |
| [[RSS Reader]]                                           |
| [[Git Projects]]                                         |
| [[Adding or removing users]]                             |
| [[Blocking Ads]]                                         |

* Readme
After the system has installed a README file will be generated which contains passwords and some brief advice on using the installed systems. You can read this with the following commands:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
emacs ~/README
#+END_SRC

You should transfer any passwords to a password manager such as [[https://www.keepassx.org/][KeepassX]] and then delete them from the README file. To save the file after removing passwords use *CTRL-x CTRL-s*.

To exit you can either just close the terminal or use *CTRL-x CTRL-c* followed by the *exit* command.
* Improving ssh security
To improve ssh security you can generate an ssh key pair on your system and then upload the public key to the Freedombone.

On your local machine:

#+BEGIN_SRC bash
ssh-keygen
#+END_SRC

For extra security you may also want to add a passphrase to the ssh private key. You can show the generated public key with:

#+BEGIN_SRC bash
cat ~/.ssh/id_rsa.pub
#+END_SRC

Log into your system and open the control panel.

#+BEGIN_SRC bash
ssh username@domain -p 2222
#+END_SRC

Select /Administrator controls/ then /Manage Users/ then /Change user ssh public key/. Copy and paste the public key here, then exit.

It's a good idea to also copy the contents of *~/.ssh/id_rsa* and *~/.ssh/id_rsa.pub* to you password manager, together with the private key password if you created one.

There are advantages and disadvantages to using ssh keys for logins. The advantage is that this is much more secure than a memorised password, but the disadvantage is that you need to carry your ssh keys around and be able to install them on any computer of mobile device that you use. In high security or hostile infosec environments it may not be possible to carry or use USB thumb drives containing your keys and so memorised passwords may be the only available choice.

If you wish to only use ssh keys then log in to the Freedombone, become the root user and open the control panel with the 'control' command. Select /Security Settings/ then keep hitting enter until you reach the question about allowing password logins. Select "no" for that, then apply the settings. Any subsequent attempts to log in via a password will then be denied.

* Administrating the system via an onion address (Tor)
You can also access your system via the Tor system using an onion address. To find out what the onion address for ssh access is you can do the following:

#+BEGIN_SRC bash
ssh username@freedombone.local -p 2222
#+END_SRC

Select /Administrator controls/ then select "About this system" and look for the onion address for ssh. You can then close the terminal and open another, then do the following on your local system:

#+BEGIN_SRC bash
freedombone-client
#+END_SRC

This will set up your ssh environment to be able to handle onion addresses. In addition if you use monkeysphere then you can do:

#+BEGIN_SRC bash
freedombone-client --ms yes
#+END_SRC

Then you can test ssh with:

#+BEGIN_SRC bash
ssh username@address.onion -p 2222
#+END_SRC

Subsequently even if dynamic DNS isn't working you may still be able to administer your system. Using the onion address also gives you some degree of protection against corporate or government metadata analysis, since it becomes more difficult to passively detect which systems are communicating.
* RSS Reader
The way that RSS reading is set up on Freedombone gives you strong reading privacy. Not only is there onion routing between you and the server but also between the server and the source of the RSS feed. The only down side is that many RSS feeds are still http only, and so could be vulnerable to injection attacks, but it's expected that more of this will go to https in the foreseeable future due to a combination of growing recognition of security issues and systems like Let's Encrypt which make obtaining certificates much easier.

[[file:images/rss_reader_mobile.jpg]]

** Finding the onion address
See the control panel for the RSS reader onion address.

#+BEGIN_SRC bash
ssh username@domainname -p 2222
#+END_SRC

Select /Administrator controls/ then select the *About* screen.

The RSS reader is accessible only via an onion address. This provides a reasonable degree of reading privacy, making it difficult for passive adversaries such as governments, corporations or criminals to create lists of sites which you are subscribed to.

To set up the system open http://rss_reader_onion_address and log in with username *admin* and the password obtained either at the beginning of the install or from the README file in your home directory. You can then select the *Actions* menu and begin adding your feeds.

** On mobile
To access the RSS reader from a mobile device you can install a Tor compatible browser such as OrFox. It will try to automatically change to the mobile version of the user interface. Remember to add the site to the NoScript whitelist, and you may also need to turn HTTPS Everywhere off.

#+BEGIN_QUOTE
A note for the paranoid is that on mobile devices you get redirected to a different onion address which is specially set up for the mobile interface, so don't be alarmed that it looks like your connection is being hijacked.
#+END_QUOTE
** With Emacs
If you are an Emacs user then you can also read your RSS feeds via the [[https://github.com/dk87/avandu][Avandu]] mode.

Add the following to your configuration, changing the address and password as appropriate.

#+begin_src emacs-lisp :tangle no
(setq avandu-tt-rss-api-url "http://rss_reader_onion_address/api/"
      avandu-user "admin"
      avandu-password "mypassword")
#+end_src

If you don't already have Emacs set up to route through Tor then also add the following:

#+begin_src emacs-lisp :tangle no
(setq socks-noproxy '("localhost"))
(require 'socks)
(require 'tls)
(setq socks-server (list "Tor socks" "localhost" 9050 5))
#+end_src

And ensure that the Tor daemon is installed:

#+begin_src bash :tangle no
sudo apt-get install tor
#+end_src
* Git Projects
Github is ok, but it's proprietary and funded by venture capital. If you been around on the internet for long enough then you know how this story eventually works itself out - i.e. badly for the users. It's really only a question of time. If you're a software developer or do things which involve the Git version control system then it's a good idea to become accustomed to hosting your own repositories, before the inevitable Github shitstorm happens.

A Git hosting system called [[https://gogs.io][Gogs]] can optionally be installed. This is very similar to Github in appearance and use. It's lightweight and so well suited for use on low power ARM servers.

Navigate to your git site and click the *Register* button. The first user registered on the system becomes the administrator. Once you've done that then it's a good idea to disable further registrations. Currently that's a little complicated, but you can do it as follows:

#+begin_src bash :tangle no
sudo username@domainname -p 2222
#+end_src

Select *Exit to the comand line*.

#+begin_src bash :tangle no
sudo su
sed -i "s|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = true|g" /home/gogs/custom/conf/app.ini
sed -i "s|SHOW_REGISTRATION_BUTTON =.*|SHOW_REGISTRATION_BUTTON = false|g" /home/gogs/custom/conf/app.ini
systemctl restart gogs
exit; exit
#+end_src

This will stop any spam accounts being created by random strangers or bots. You might want to mirror existing repos, and at any time a mirror can be converted into the main repo.
* Adding or removing users
Log into the system with:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
#+END_SRC

Select *Administrator controls* then *User Management*. Depending upon the type of installation after selecting administrator controls you might need to enter:

#+BEGIN_SRC bash
sudo su
control
#+END_SRC

[[file:images/controlpanel/control_panel_manage_users.jpg]]

* Blocking Ads
Everyone except for advertisers hates adverts. Not only are they annoying, but they can consume a lot of bandwidth, be a privacy problem in terms of allowing companies to track your browsing habits and also any badly written scripts they contain may introduce exploitable security holes. Also if you're poor then adverts often make you want things that you can't have.

You can block ads for any devices connected to your local network by installing the *pihole* app from *Add/Remove Apps* on the administrator control panel. This may help to improve overall performance of your devices by not wasting time downloading unwanted images or scripts.

Also don't expect perfection. Though many ads may be blocked by this system some will still get through. It's a constant cat and mouse game between advertisers and blockers.

** Set a static IP address

Ensure that your system has a static local IP address (typically 192.168..) using the option on the control panel. You will also need to know the IP address of your internet router, which is usually *192.168.1.1* or *192.168.1.254*.

When that's done select *About this system* from the control panel and see the IPv4 address. You can use this as a DNS address in two ways:

** On each client system within your local network

#+begin_src bash
sudo chattr -i /etc/resolv.conf
sudo nano /etc/resolv.conf
#+end_src

Comment out any existing entries with a # character and add:

#+begin_src bash
nameserver [IPv4 address from the About screen]
#+end_src

Normally /resolv.conf/ will be overwritten every time your reboot, but you can prevent this with:

#+begin_src bash
sudo chattr +i /etc/resolv.conf
#+end_src

** On your internet router
If you can access the settings on your local internet router then this is the simplest way to provide ad blocking for all devices which connect to it. Unfortunately some router models don't let you edit the DNS settings and if that's the case you might want to consider getting a different router.

Edit the DNS settings and add the IPv4 address which you got from the control panel About screen. Exactly how you do this will just depend upon your particular router model. You may also need to set the same address twice, because two addresses are conventional.

*** LibreCMC
On a router running LibreCMC from the *Network* menu select *DHCP and DNS*. Enter the static IP address of your Freedombone system within *DNS Forwardings*, then at the bottom of the page click on *Save & Apply*. Any devices which connect to your router will now have ad blocking.

** Configuring block lists
You can configure the block lists which the system uses by going to the *administrator control panel*, selecting *App Settings* then choosing *pihole*. You can also add any extra domain names to the whitelist if they're being wrongly blocked or to the blacklist if they're not blocked by the current lists.



#+BEGIN_EXPORT html
<center>
Return to the <a href="index.html">home page</a>
</center>
#+END_EXPORT
